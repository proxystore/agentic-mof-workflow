[project]
name = "mofa"
version = "0.0.1"
authors = [
    { name = "Hyun Park", email = "hyunp2@illinois.edu" },
    { name = "Xiaoli Yan", email = "xyan11@uic.edu" },
    { name = "Eliu Huerta", email = "huerta@anl.gov" },
    { name = "Logan Ward", email = "lward@anl.gov" },
]
description = 'Generating useful MOFs on HPC'
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
keywords = ["HPC", "AI", "Workflows", "Quantum Chemistry", "Chemical Engineering"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: System :: Distributed Computing",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Programming Language :: Python :: 3",
]
dependencies = [
    "colmena==0.7.*",
    "more-itertools",
    "parsl>=2023.04",
    "tqdm",
    
    # Chemistry related stuff
    "ase>3.22",
    "rdkit>2024",
    "pymatgen",

    # ML-related dependencies
    "pytorch-lightning",
    "wandb",
    "imageio",
    "scikit-learn",

    # Performance tracking
    "gpustat",

    # Data management
    "pymongo>=4",
    "pandas",

    "globus-compute-sdk",
    "globus-compute-endpoint",
]

[tool.setuptools.packages.find]
include = ['mofa*']

[project.urls]
repository = "https://github.com/globus-labs/mof-generation-at-scale"

[project.optional-dependencies]
test = [
    'flake8',
    'pytest',
    'pytest-skip-slow',
    'pytest-timeout',
    'pytest-cov',
    'mongomock'
]

[project.scripts]
monitor_utilization = "mofa.hpc.utilization:utilization_cli"

[tool.mypy]
python_version = "3.10"
plugins = [
    "mypy.plugins.proper_plugin",
    "pydantic.mypy",
]
check_untyped_defs = true
disable_error_code = "import-untyped"
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.format]
indent-style = "space"

[tool.ruff.lint]
select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    # mccabe
    "C90",
    # isort
    "I",
    # pep8-naming
    "N",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # PyLint
    "PL",
    # ruff-specific
    "RUF",
]
extend-ignore = [
    # Allow builtin module shadowing.
    "A005",
    # Do not require: module (D100), package (D104), magic method (D105),
    # or __init__ (D107) docstrings.
    "D100", "D104", "D105", "D107",
    # Allow nested with statements.
    "SIM117",
]

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["mofa", "tests"]
order-by-type = false
required-imports = ["from __future__ import annotations"]
